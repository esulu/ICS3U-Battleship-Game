/*
 Eren Sulutas
 05/31/2017
 ICS3U
 Summative - Game Design
 Battleship
 This program is a playable version of the board game Battleship made in Java 
 */

import java.util.Random;

class Battleship 
{
  public static void main(String[] args)
  {
    
    // Gives the user options on whether they want to play or see the rules
    
    String input; 
    boolean validEntry = false;
    String playAgainInput = "";
    boolean playAgain = false;
    boolean legalEntry = false;
    
    System.out.println("Welcome to Battleship, a Java game made by Eren Sulutas."); /*
     System.out.println("                                     # #  ( )");
     System.out.println("                                  ___#_#___|__");
     System.out.println("                              _  |____________|  _");
     System.out.println("                       _=====| | |            | | |==== _");
     System.out.println("                 =====| |.---------------------------. | |====");
     System.out.println("   <--------------------'   .  .  .  .  .  .  .  .   '--------------/");
     System.out.println("     \\                                                             /");
     System.out.println("      \\___________________________________________________________/");
     System.out.println("  wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww");
     System.out.println("wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww");
     System.out.println("   wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww");   */
    
    do { // Loop for the entire game 
      
      System.out.println("\nEnter \"r\" to see the rules and the gameboard legend or \"p\" to play the game.");
      
      do {
        input = In.getString();
        input = input.toLowerCase();
        if (input.equals("r")) { // User wants to see the rules 
          printRules();
        } else if (input.equals("p")) { // User wants the play the game 
          playGame();
          validEntry = true;
        } else { // User enters an invalid input 
          System.out.println("Error: Invalid input. Enter \"r\" to see the rules and the gameboard legend or \"p\" to play the game.");
          validEntry = false;
        }
        
      } while (validEntry == false); // Loop ends until the user enters a valid entry 
      
      System.out.println("\nEnd game options:");
      System.out.println("- Enter 1 to play again");
      System.out.println("- Enter 2 to stop playing");
      
      do {
        playAgainInput = In.getString();
        
        if (playAgainInput.equals("1")) {
          playAgain = true;
          legalEntry = true;
        } else if (playAgainInput.equals("2")) {
          playAgain = false;
          legalEntry = true;
          System.out.println("End of game.");
        } else {
          System.out.println("Error: Enter 1 to play again or 2 to stop playing.");
          legalEntry = false;
        }
      } while (legalEntry == false); // Loops until the user enters 1 or 2
      
    } while (playAgain == true); // Program restarts if the user wants to play again
    
  }
  
  public static void printRules()
  {
    
    // Displays the instructions on how to play the game to the user 
    
    System.out.println("\nGame Objective");
    System.out.println("\nThis version of Battleship is exclusively against a computer or CPU.");
    System.out.println("The object of Battleship is to try and sink all of the CPU's ships before they sink all of your ships. All of the CPU's ships are somewhere on its board.");
    System.out.println("You try and hit them by entering the coordinates of one of the squares on the board. The CPU also tries to hit your ships.");
    System.out.println("The defense portion of the board marks your ships and the CPU's attempted shots. The offence portion of the board marks empty spaces where you will try to shoot the CPU's ships.");
    System.out.println("Each player has 4 ships, an Aircraft Carrier (1x5), a Battleship (1x4), a Submarine (1x3), and a Patrol Boat (1x2).");
    System.out.println("Anytime a player gets a hit on their enemy, they may take another shot until they miss or until the game is over.");
    
    System.out.println("\nBoard Legend: ");
    System.out.println("~ Empty space");
    System.out.println("O Missed shot");
    System.out.println("X Hit shot");
    System.out.println("* Sunken ship");
    System.out.println("# User ship (Can only be seen by you)");
    
    System.out.println("\nSample board layout:\n");
    
    System.out.println("      Defense            Offense"); 
    System.out.println("  1 2 3 4 5 6 7 8    1 2 3 4 5 6 7 8");
    System.out.println("A ~ ~ ~ ~ # # # #  A ~ ~ ~ ~ ~ ~ ~ ~");
    System.out.println("B ~ # ~ ~ O ~ ~ ~  B ~ ~ ~ * * * * ~");  
    System.out.println("C ~ # ~ ~ ~ ~ ~ ~  C ~ O ~ ~ ~ ~ ~ ~");
    System.out.println("D ~ # ~ ~ # # # ~  D ~ ~ X X O ~ ~ ~"); 
    System.out.println("E ~ # ~ ~ ~ ~ ~ ~  E ~ ~ ~ ~ ~ ~ ~ ~");  
    System.out.println("F ~ # ~ ~ ~ ~ # ~  F ~ ~ ~ ~ ~ ~ ~ ~");  
    System.out.println("G ~ ~ ~ O ~ ~ # ~  G ~ O ~ ~ ~ O ~ ~"); 
    System.out.println("H ~ O ~ ~ ~ ~ ~ ~  H ~ ~ ~ ~ ~ ~ ~ ~");
    
    System.out.println("\nEnter \"p\" to start the game.");
    
  }
  
  public static void playGame()
  {
    
    // Method where the main gameplay will be handled  
    
    int[][] board = new int[9][9]; // Initializes an 8x8 game board
    int[][] board2 = new int[9][9];
    String[] userShip1 = new String[5]; // Initializes the arrays which hold the coordinates of each user ship
    String[] userShip2 = new String[4];
    String[] userShip3 = new String[3];
    String[] userShip4 = new String[2];
    Object[] userTemp = new Object[5];
    String[] ship1 = new String[5]; // Initializes the arrays which hold the coordinates of each CPU ship
    String[] ship2 = new String[4];
    String[] ship3 = new String[3];
    String[] ship4 = new String[2];
    Object[] temp = new Object[5];
    
    Object[] tempUser = new Object[4]; // Objects and variables to hold user/cpu preformance stats
    int hitsUser = 0;
    int missesUser = 0;
    int sunkUser = 0;
    Object[] tempCPU = new Object[4];
    int hitsCPU = 0;
    int missesCPU = 0;
    int sunkCPU = 0;
    
    int finalResult; 
    
    userTemp = userSetup(board, board2, userShip1, userShip2, userShip3, userShip4); // Method to handle the user ship setup
    board = (int[][])userTemp[0];
    userShip1 = (String[])userTemp[1];
    userShip2 = (String[])userTemp[2];
    userShip3 = (String[])userTemp[3];
    userShip4 = (String[])userTemp[4];
    
    temp = cpuSetup(board2, ship1, ship2, ship3, ship4); // Method to handle the CPU ship setup 
    board2 = (int[][])temp[0];
    ship1 = (String[])temp[1];
    ship2 = (String[])temp[2];
    ship3 = (String[])temp[3];
    ship4 = (String[])temp[4];
    
    // Loops the turns of the user and the CPU until there is a winner 
    do {
      System.out.println("Users turn:");  
      tempUser = userChoice(board, board2, ship1, ship2, ship3, ship4);
      board2 = (int[][])tempUser[0];
      hitsUser += (Integer)tempUser[1];
      missesUser += (Integer)tempUser[2];
      sunkUser += (Integer)tempUser[3];
      finalResult = endGame(board, board2); // Sends the boards to the gameEnd method to check if the game is over
      if (finalResult == 2) { // Checks if the user won the game before the CPU's turn begins
        break;
      } else { // User didn't win 
        tempCPU = cpuChoice(board, board2, userShip1, userShip2, userShip3, userShip4);
        board = (int[][])tempCPU[0];
        hitsCPU += (Integer)tempCPU[1];
        missesCPU += (Integer)tempCPU[2];
        sunkCPU += (Integer)tempCPU[3];
        printBoard(board, board2);
        finalResult = endGame(board, board2); // Sends the boards to the gameEnd method to check if the game is over
      }
    } while (finalResult  == 0);
    
    if (finalResult == 1) { // CPU win
      System.out.println("End of Game. CPU Wins!");
    } else { // User win
      System.out.println("End of Game. User Wins!");
    }
    
    System.out.println("\nFinal Stats:");
    System.out.printf("%-18s %10s %10s %n", " ",  "CPU", "User");
    System.out.printf("%-18s %10s %10s %n", "Hits:", hitsCPU, hitsUser);
    System.out.printf("%-18s %10s %10s %n", "Misses:", missesCPU, missesUser);
    System.out.printf("%-18s %10s %10s %n", "Total shots: ", hitsCPU + missesCPU, hitsUser + missesUser);
    System.out.printf("%-18s %10s %10s %n", "Shot accuracy:", "%" + (double)Math.round((double)hitsCPU * 100 / (hitsCPU + missesCPU) * 10) / 10, "%" + (double)Math.round((double)hitsUser * 100 / (hitsUser + missesUser) * 10) / 10); // Makes the shot accuracy to a percent and rounds it to 2 decimal places
    System.out.printf("%-18s %10s %10s %n", "Ships sunk:", sunkCPU, sunkUser);
    
  }
  
  public static void printBoard(int board[][], int board2[][])
  {
    
    // Method used to print the playing board when updated 
    
    String[] numbers = {" ", "1", "2", "3", "4", "5", "6", "7", "8"};
    String[] letters = {" ", "A", "B", "C", "D", "E", "F", "G", "H"};
    
    System.out.println("      Defense\t      Offense");
    
    // Fills the boards
    for (int y = 0; y < 9; y ++) {
      for (int x = 0; x < 9; x ++){ // Board 1
        if (x == 0) { // Letters for the first column 
          System.out.print(letters[y]);
        } else if (y == 0) { // Numbers for the first row
          System.out.print(numbers[x]);
        } else if (board[y][x] == 0) { // Empty board spaces              
          System.out.print("~");
        } else if (board[y][x] == 1) { // Missed CPU shot 
          System.out.print("O");
        } else if (board[y][x] == 2) { // CPU hit 
          System.out.print("X");
        } else if (board[y][x] == 3) { // Sunken user ship
          System.out.print("*");
        } else if (board[y][x] == 4) { // User ship
          System.out.print("#");
        }
        System.out.print(" "); // Spacing 
      }
      for (int x = 0; x < 9; x ++){ // Board 2
        if (x == 0) { // Letters for the first column 
          System.out.print("\t" + letters[y]);
        } else if (y == 0) { // Numbers for the first row
          System.out.print(numbers[x]);
        } else if (board2[y][x] == 0) { // Empty board spaces              
          System.out.print("~"); 
        } else if (board2[y][x] == 1) { // Missed user shot 
          System.out.print("O");
        } else if (board2[y][x] == 2) { // User hit 
          System.out.print("X"); 
        } else if (board2[y][x] == 3) { // Sunken CPU ship
          System.out.print("*");
        } else if (board2[y][x] == 4) { //CPU ship, not seen by the user
          System.out.print("~");
        }
        System.out.print(" "); // Spacing   
      }
      System.out.println(); // New lines 
    } 
    
  }
  
  public static Object[] userSetup(int[][] board, int[][] board2,  String[] ship1, String[] ship2, String[] ship3, String[] ship4) 
  {
    
    // Method where the user makes their initial ship setup 
    
    Object[] temp1 = new Object[2];
    Object[] temp2 = new Object[2];
    Object[] temp3 = new Object[2];
    Object[] temp4 = new Object[2];
    int[] entry0 = new int[3]; // Arrays to hold the inital coordinates of the ships 
    int[] entry1 = new int[3];
    int[] entry2 = new int[3];
    int[] entry3 = new int[3];
    int shipSize;
    
    System.out.println("\nShip placements: ");
    System.out.println("\nThe coordinate you enter will be the upper left of the ship.");
    System.out.println("Entry must be entered in the following format: <V for vertical/H for horizontal> <Letter> <Number> Examples: VC5, HG5\n");
    
    printBoard(board, board2); // Prints an empty board to help the user with his/her ship placesments 
    
    System.out.println("\nEnter the coordinates to place your Aircraft Carrier (1x5). Ex: HA4");
    entry0 = lettersToIntSetup(); // User entry is handled in the lettersToIntSetup method 
    shipSize = 5; // Indicates the ship size (in this case 5 long)
    
    temp1 = setupUserError(entry0, board, shipSize, ship1); // Sends some variables to the setupUserError method to check if the ship is illegally placed 
    
    printBoard(board, board2); // Prints the updated board containing the user's newly placed ship 
    
    System.out.println("Enter the coordinates to place your Battleship (1x4). Ex: HA4");
    entry1 = lettersToIntSetup(); // User entry is handled in the lettersToIntSetup method 
    shipSize = 4; // Indicates the ship size (in this case 4 long)
    
    temp2 = setupUserError(entry1, board, shipSize, ship2); // Sends some variables to the setupUserError method to check if the ship is illegally placed 
    
    printBoard(board, board2); // Prints the updated board containing the user's newly placed ship 
    
    System.out.println("Enter the coordinates to place your Submarine (1x3). Ex: HA4");
    entry2 = lettersToIntSetup(); // User entry is handled in the lettersToIntSetup method 
    shipSize = 3; // Indicates the ship size (in this case 3 long)
    
    temp3 = setupUserError(entry2, board, shipSize, ship3); // Sends some variables to the setupUserError method to check if the ship is illegally placed 
    
    printBoard(board, board2); // Prints the updated board containing the user's newly placed ship 
    
    System.out.println("Enter the coordinates to place your Patrol Boat (1x2). Ex: HA4");
    entry3 = lettersToIntSetup(); // User entry is handled in the lettersToIntSetup method 
    shipSize = 2; // Indicates the ship size (in this case 2 long)
    
    temp4 = setupUserError(entry3, board, shipSize, ship4); // Sends some variables to the setupUserError method to check if the ship is illegally placed 
    
    printBoard(board, board2); // Prints the updated board containing the user's newly placed ship 
    
    System.out.println("End of ship placements\n");
    
    // Object containing multiple variables which will be returned 
    Object[] tempFinal = new Object[]{(int[][])temp4[0], (String[])temp1[1], (String[])temp2[1], (String[])temp3[1], (String[])temp4[1]};
    
    return tempFinal;
    
  }
  
  public static int[] lettersToIntSetup()
  {
    
    // Method to convert the ship setup coordinate values to integers 
    
    String input;
    boolean validEntry = false;
    int y = 0; 
    int x = 0;
    int[] coordinates = new int[3];
    
    do {
      input = In.getString(); // User input 
      if (input.length() == 3) { // Checks if the input is 3 characters long 
        char position = input.charAt(0);
        char yChar = input.charAt(1);
        char xChar = input.charAt(2);
        position = Character.toLowerCase(position);
        yChar = Character.toLowerCase(yChar);
        if ((position == 'v' || position == 'h') && (yChar >= 'a' && yChar <= 'h') && (xChar >= '1' && xChar <= '8')) { // Checks if the user entered a v/h position,  the y-coordinate is a letter from a-h and if the x-coordinate is a number from 1-8
          // Checks if the user entered a veritical position 
          if (position == 'v') { 
            coordinates[0] = 1;
          } else { // User entered a horizontal position
            coordinates[0] = 2;
          }
          y = yChar - 'a' + 1; // Converts the y char value to an int
          x = Character.getNumericValue(xChar); // Converts the x char value to an int 
          validEntry = true;
        } else { // Invalid input 
          System.out.println("Error: Invalid coordinates. Please enter new coordinates. Ex: HA4");
        }
      } else { // Entry is not 3 characters long 
        System.out.println("Error: Entry must be 3 characters long. Please enter new coordinates. Ex: VH6");
      }
    } while (validEntry == false);  // Loops until the user enters a valid coordinate
    
    coordinates[1] = y;
    coordinates[2] = x;
    
    return coordinates;
    
    
  }
  
  public static Object[] setupUserError(int[] entry, int[][] board, int shipSize, String[] ship)
  {
    
    // Method which checks if user boats overlap or are placed in invalid locations
    boolean added = false; 
    
    // Loops until the ship has been added 
    while(!added) {
      
      if (entry[0] == 2) {  // Checks for available horizontal space for the ship
        
        boolean hasSpace = true;
        
        for (int i = 0; i < shipSize; i ++) {
          // Checks if the ship fits on the board horizontally (Does not go out of bounds)
          if (entry[2] + i >= 9) {
            // Ship goes out of the board 
            hasSpace = false;
            System.out.println("Error: Ship cannot go out of the board. Enter a new input. Ex: HB7");
            entry = lettersToIntSetup(); // User enters a new input 
            break; 
          }
          if (board[entry[1]][entry[2]+i] != 0) {
            // Checks if this area is occupied by another ship
            hasSpace = false;
            System.out.println("Error: Ships cannot overlap. Enter a new input. Ex: HB7");
            entry = lettersToIntSetup(); // User enters a new input 
            break;
          }
        }
        if (!hasSpace) { 
          // No space found, checks again 
          continue;
        } 
        for (int i = 0; i < shipSize; i++) {
          board[entry[1]][entry[2]+i] = 4; // Sets the position values to 4 which indicates a ship
          
          // Records the coordinates of the ship being placed
          ship[i] = ("" + entry[1] + (entry[2] + i));
          
        }
        added = true;
        
      } else {  // Checks for available veritical space for the ship
        
        boolean hasSpace = true;
        
        for (int i = 0; i < shipSize; i++) {
          // Checks if the ship fits on the board vertically (Does not go out of bounds)
          if (entry[1] + i >= 9) { 
            // Ship goes out of the board 
            hasSpace = false;
            System.out.println("Error: Ship cannot go out of the board. Enter a new input. Ex: HB7");
            entry = lettersToIntSetup(); // User enters a new input 
            break;
          }
          if (board[entry[1]+i][entry[2]] != 0) {
            // Checks if this area is occupied by another ship
            hasSpace = false;
            System.out.println("Error: Ships cannot overlap. Enter a new input. Ex: HB7");
            entry = lettersToIntSetup(); // User enters a new input 
            break;
          }
        }
        if (!hasSpace) {
          // No space found, checks again 
          continue;
        }
        for (int i = 0; i < shipSize; i++) {
          board[entry[1]+i][entry[2]] = 4; // Sets the position values to 4 which indicates a ship
          
          // Records the coordinates of the ship being placed
          ship[i] = ("" + (entry[1] + i) + entry[2]);
          
        }
        added = true;
      }
    }
    
    // Creates an object which contains all the arrays that are to be returned
    Object[] output = new Object[]{board, ship};
    
    return output;
    
  }
  
  public static Object[] cpuSetup(int[][] board, String[] ship1, String[] ship2, String[] ship3, String[] ship4)
  {
    
    // Method where the computer makes their initial ship setup 
    int[] shipSize = {5, 4, 3, 2}; // Array for the ship sizes 
    
    for (int ship : shipSize) { // Loop continues for each ship 
      
      boolean added = false; 
      
      // Loops until the ship has been added 
      while (!added) {
        Random generate = new Random();
        
        // Generates random numbers for the x and y values 
        int x = (generate.nextInt(8)) + 1;
        int y = (generate.nextInt(8)) + 1;
        
        // Genterates either 0 or 1 to determine if the ship is horizontal or vertical 
        int direction = generate.nextInt(2); 
        boolean horizontal = false;
        
        // Checks if the direction is horizontal 
        if (direction == 0) {
          horizontal = true;
        }
        
        if (horizontal) { // Checks for available space if the ship is horizontal 
          
          boolean hasSpace = true;
          
          for (int i = 0; i < ship; i ++) { 
            
            // Checks if the ship fits on the board horizontally (Does not go out of bounds)
            if (x + i >= 9) {
              // Ship goes out of the board 
              hasSpace = false;
              break;
            }
            if (board[y][x+i] != 0) {
              // Checks if this area is occupied by another ship
              hasSpace = false;
              break;
            }
          }
          if (!hasSpace) { 
            // No space found, checks again 
            continue;
          }
          for (int i = 0; i < ship; i++) {
            board[y][x+i] = 4; // Sets the position values to 4 which indicates a ship
            
            // Checks which ship is being placed and records the coordinates of them 
            if (ship == 5) {  
              ship1[i] = ("" + y + (x + i));
            } else if (ship == 4) { 
              ship2[i] = ("" + y + (x + i));
            } else if (ship == 3) { 
              ship3[i] = ("" + y + (x + i));
            } else if (ship == 2) {
              ship4[i] = ("" + y + (x + i));
            }
            
          }
          added = true;
          
        } else { // Ship is placed vertically 
          
          boolean hasSpace = true; 
          
          for (int i = 0; i < ship; i ++) { 
            
            // Checks if the ship fits on the board vertically (Does not go out of bounds)
            if (y + i >= 9) { 
              // Ship goes out of the board 
              hasSpace = false;
              break;
            }
            if (board[y+i][x] != 0) {
              // Checks if this area is occupied by another ship
              hasSpace = false;
              break;
            }
          }
          if (!hasSpace) { 
            // No space found, checks again 
            continue;
          }
          for (int i = 0; i < ship; i++) {
            board[y+i][x] = 4; // Sets the position values to 4 which indicates a ship
            
            // Checks which ship is being placed and records the coordinates of them 
            if (ship == 5) {  
              ship1[i] = ("" + (y + i) + x);
            } else if (ship == 4) { 
              ship2[i] = ("" + (y + i) + x);
            } else if (ship == 3) { 
              ship3[i] = ("" + (y + i) + x);
            } else if (ship == 2) {
              ship4[i] = ("" + (y + i) + x);
            }
            
          }
          added = true;
        }
      }
    }
    
    // Creates an object which contains all the arrays that are to be returned
    Object[] output = new Object[]{board, ship1, ship2, ship3, ship4};
    
    return output;
    
  }
  
  public static Object[] userChoice(int[][] board, int[][] board2, String[] ship1, String[] ship2, String[] ship3, String[] ship4)
  {
    
    // Method which handles the user choice of attack
    
    int[] coordinates = new int[2];
    boolean hitShip = false;
    boolean isValid = false;
    int hits = 0; 
    int misses = 0;
    int isGameOver = 0;
    int sunk = 0;
    
    do {
      
      do { 
        
        System.out.println("Enter the coordinates you wish to shoot. Ex: B4");
        
        coordinates = lettersToInt(); // User entry is handled in the lettersToInt method 
        
        if (board2[coordinates[0]][coordinates[1]] != 0 && board2[coordinates[0]][coordinates[1]] != 4) { // The cell is occupied 
          System.out.print("Error: The coordinates have already been entered. ");
          isValid = false;
        } else { // The cell is unoccupied 
          isValid = true;
          // Checks if the user missed, hit, or sunk a ship 
          if (board2[coordinates[0]][coordinates[1]] == 0) { // Miss
            System.out.println("Miss!");
            hitShip = false;
            misses ++;
            board2[coordinates[0]][coordinates[1]] = 1; 
          } else if (board2[coordinates[0]][coordinates[1]] == 4) { // Hit 
            hitShip = true;
            hits ++;
            board2[coordinates[0]][coordinates[1]] = 2;
            
            
            // Checks if the Aircraft carrier sunk 
            if (board2[Character.getNumericValue(ship1[0].charAt(0))][Character.getNumericValue(ship1[0].charAt(1))] == 2 && board2[Character.getNumericValue(ship1[1].charAt(0))][Character.getNumericValue(ship1[1].charAt(1))] == 2 && board2[Character.getNumericValue(ship1[2].charAt(0))][Character.getNumericValue(ship1[2].charAt(1))] == 2 && board2[Character.getNumericValue(ship1[3].charAt(0))][Character.getNumericValue(ship1[3].charAt(1))] == 2 && board2[Character.getNumericValue(ship1[4].charAt(0))][Character.getNumericValue(ship1[4].charAt(1))] == 2) {                                                                         
              System.out.println("You sunk the enemy Aircraft Carrier!");
              
              // Changes the values of the CPU ship coordinates to 3 which indiates a sunken ship
              board2[Character.getNumericValue(ship1[0].charAt(0))][Character.getNumericValue(ship1[0].charAt(1))] = 3; 
              board2[Character.getNumericValue(ship1[1].charAt(0))][Character.getNumericValue(ship1[1].charAt(1))] = 3; 
              board2[Character.getNumericValue(ship1[2].charAt(0))][Character.getNumericValue(ship1[2].charAt(1))] = 3; 
              board2[Character.getNumericValue(ship1[3].charAt(0))][Character.getNumericValue(ship1[3].charAt(1))] = 3; 
              board2[Character.getNumericValue(ship1[4].charAt(0))][Character.getNumericValue(ship1[4].charAt(1))] = 3; 
              
              sunk++;
              
            } else if (board2[Character.getNumericValue(ship2[0].charAt(0))][Character.getNumericValue(ship2[0].charAt(1))] == 2 && board2[Character.getNumericValue(ship2[1].charAt(0))][Character.getNumericValue(ship2[1].charAt(1))] == 2 && board2[Character.getNumericValue(ship2[2].charAt(0))][Character.getNumericValue(ship2[2].charAt(1))] == 2 && board2[Character.getNumericValue(ship2[3].charAt(0))][Character.getNumericValue(ship2[3].charAt(1))] == 2) {
              // Checks if the Battleship sunk
              System.out.println("You sunk the enemy Battleship!");
              
              // Changes the values of the CPU ship coordinates to 3 which indiates a sunken ship
              board2[Character.getNumericValue(ship2[0].charAt(0))][Character.getNumericValue(ship2[0].charAt(1))] = 3;
              board2[Character.getNumericValue(ship2[1].charAt(0))][Character.getNumericValue(ship2[1].charAt(1))] = 3;
              board2[Character.getNumericValue(ship2[2].charAt(0))][Character.getNumericValue(ship2[2].charAt(1))] = 3;
              board2[Character.getNumericValue(ship2[3].charAt(0))][Character.getNumericValue(ship2[3].charAt(1))] = 3;
              
              sunk++;
              
            } else if (board2[Character.getNumericValue(ship3[0].charAt(0))][Character.getNumericValue(ship3[0].charAt(1))] == 2 && board2[Character.getNumericValue(ship3[1].charAt(0))][Character.getNumericValue(ship3[1].charAt(1))] == 2 && board2[Character.getNumericValue(ship3[2].charAt(0))][Character.getNumericValue(ship3[2].charAt(1))] == 2) {
              // Checks if the Submarine sunk
              System.out.println("You sunk the enemy Submarine!");
              
              // Changes the values of the CPU ship coordinates to 3 which indiates a sunken ship
              board2[Character.getNumericValue(ship3[0].charAt(0))][Character.getNumericValue(ship3[0].charAt(1))] = 3; 
              board2[Character.getNumericValue(ship3[1].charAt(0))][Character.getNumericValue(ship3[1].charAt(1))] = 3; 
              board2[Character.getNumericValue(ship3[2].charAt(0))][Character.getNumericValue(ship3[2].charAt(1))] = 3; 
              
              sunk++;
              
            } else if (board2[Character.getNumericValue(ship4[0].charAt(0))][Character.getNumericValue(ship4[0].charAt(1))] == 2 && board2[Character.getNumericValue(ship4[1].charAt(0))][Character.getNumericValue(ship4[1].charAt(1))] == 2) {
              // Checks if the Patrol Boat sunk
              System.out.println("You sunk the enemy Patrol Boat!");
              
              // Changes the values of the CPU ship coordinates to 3 which indiates a sunken ship
              board2[Character.getNumericValue(ship4[0].charAt(0))][Character.getNumericValue(ship4[0].charAt(1))] = 3; 
              board2[Character.getNumericValue(ship4[1].charAt(0))][Character.getNumericValue(ship4[1].charAt(1))] = 3; 
              
              sunk++;
              
            } else { // Hit but no ships are sunk
              System.out.println("Hit!");
            }
            printBoard(board, board2);
            
            isGameOver = endGame(board, board2); // Checks if the user took out all the CPU ships 
            if (isGameOver == 2) { // User win 
              break;
            }
          }
        }
      } while (hitShip == true); // Loop ends when the user misses a shot 
      
    } while (isValid == false); // Loops until the user enters a valid cell 
    
    // Creates an object which contains all the veriables that need to be returned
    Object[] toBeReturned = new Object[]{board2, hits, misses, sunk};
    
    return toBeReturned;
    
  }
  
  public static Object[] cpuChoice(int[][] board, int[][] board2, String[] ship1, String[] ship2, String[] ship3, String[] ship4)
  {
    
    // Method which handles the computer choice of attack 
    
    int [] coordinates = new int[2];
    boolean hitShip = false;
    boolean isValid = false;
    boolean sunkenShip = false;
    String shipName = "";
    boolean shipDamaged = false; // Boolean to check if the ship landed a damaging hit to a user ship
    int[] sourroundingCoordinates1 = new int[2];
    int[] sourroundingCoordinates2 = new int[2];
    int[] sourroundingCoordinates3 = new int[2];
    int[] sourroundingCoordinates4 = new int[2];
    int randomInt;
    int hits = 0; 
    int misses = 0;
    int isGameOver = 0;
    int sunk = 0;
    
    do {
      
      do {
        
        Random generate = new Random();
        
        // CPU coordinates 
        
        // Checks for hit cells 
        for (int y = 0; y < 9; y ++) {
          for (int x = 0; x < 9; x ++){ // Board 1
            if (board[y][x] == 2) { // Hit cell       
              shipDamaged = true;
              
              coordinates[0] = y;
              coordinates[1] = x;
              
              sourroundingCoordinates1[0] = coordinates[0];
              sourroundingCoordinates1[1] = coordinates[1] + 1; 
              
              // Coordinates 1 cell lower than the hit cell 
              sourroundingCoordinates2[0] = coordinates[0];
              sourroundingCoordinates2[1] = coordinates[1] -1 ;
              
              // Coordinates 1 cell to the right than the hit cell 
              sourroundingCoordinates3[0] = coordinates[0] + 1;
              sourroundingCoordinates3[1] = coordinates[1];
              
              // Coordinates 1 cell to the left than the hit cell
              sourroundingCoordinates4[0] = coordinates[0] - 1;
              sourroundingCoordinates4[1] = coordinates[1];
              
              if ((board[sourroundingCoordinates1[0]][sourroundingCoordinates1[1]] == 0 || board[sourroundingCoordinates1[0]][sourroundingCoordinates1[1]] == 4) || (board[sourroundingCoordinates2[0]][sourroundingCoordinates2[1]] == 0 || board[sourroundingCoordinates2[0]][sourroundingCoordinates2[1]] == 4) || (board[sourroundingCoordinates3[0]][sourroundingCoordinates3[1]] == 0 || board[sourroundingCoordinates3[0]][sourroundingCoordinates3[1]] == 4) || (board[sourroundingCoordinates4[0]][sourroundingCoordinates4[1]] == 0 || board[sourroundingCoordinates4[0]][sourroundingCoordinates4[1]] == 4)) {
                // Checks if the sourrounding coordinates have been shot or not 
                
                // Genterates a random integer from 0-3 to determine which surrounding area to shoot 
                randomInt = generate.nextInt(4);
                
                if (randomInt == 0) {
                  coordinates[0] = sourroundingCoordinates1[0];
                  coordinates[1] = sourroundingCoordinates1[1];
                } else if (randomInt == 1) {
                  coordinates[0] = sourroundingCoordinates2[0];
                  coordinates[1] = sourroundingCoordinates2[1];
                } else if (randomInt == 2) {
                  coordinates[0] = sourroundingCoordinates3[0];
                  coordinates[1] = sourroundingCoordinates3[1];
                } else {
                  coordinates[0] = sourroundingCoordinates4[0];
                  coordinates[1] = sourroundingCoordinates4[1];
                }
                break;
              }
            }
          }
        }
        
        if (shipDamaged == false) { // No cells are hit, proceeds with random generation 
          coordinates[0] = (generate.nextInt(8)) + 1; 
          coordinates[1] = (generate.nextInt(8)) + 1;
        }
        
        if (coordinates[0] < 1 || coordinates[0] > 8 || coordinates[1] < 1 || coordinates[1] > 8 || (board[coordinates[0]][coordinates[1]] != 0 && board[coordinates[0]][coordinates[1]] != 4)) { // The cell is occupied or invalid
          isValid = false;
        } else { // The cell is unoccupied 
          isValid = true;
          // Checks if the CPU missed, hit, or sunk a ship 
          if (board[coordinates[0]][coordinates[1]] == 0) { // Miss
            hitShip = false;
            misses ++;
            board[coordinates[0]][coordinates[1]] = 1; 
          } else if (board[coordinates[0]][coordinates[1]] == 4) { // Hit 
            hitShip = true;
            hits ++;
            board[coordinates[0]][coordinates[1]] = 2; 
            
            // Checks if the Aircraft carrier sunk 
            if (board[Character.getNumericValue(ship1[0].charAt(0))][Character.getNumericValue(ship1[0].charAt(1))] == 2 && board[Character.getNumericValue(ship1[1].charAt(0))][Character.getNumericValue(ship1[1].charAt(1))] == 2 && board[Character.getNumericValue(ship1[2].charAt(0))][Character.getNumericValue(ship1[2].charAt(1))] == 2 && board[Character.getNumericValue(ship1[3].charAt(0))][Character.getNumericValue(ship1[3].charAt(1))] == 2 && board[Character.getNumericValue(ship1[4].charAt(0))][Character.getNumericValue(ship1[4].charAt(1))] == 2) {                                                                         
              
              // Changes the values of the CPU ship coordinates to 3 which indiates a sunken ship
              board[Character.getNumericValue(ship1[0].charAt(0))][Character.getNumericValue(ship1[0].charAt(1))] = 3; 
              board[Character.getNumericValue(ship1[1].charAt(0))][Character.getNumericValue(ship1[1].charAt(1))] = 3; 
              board[Character.getNumericValue(ship1[2].charAt(0))][Character.getNumericValue(ship1[2].charAt(1))] = 3; 
              board[Character.getNumericValue(ship1[3].charAt(0))][Character.getNumericValue(ship1[3].charAt(1))] = 3; 
              board[Character.getNumericValue(ship1[4].charAt(0))][Character.getNumericValue(ship1[4].charAt(1))] = 3; 
              
              sunk++;
              shipDamaged = false; // shipDamaged is set to false so the CPU stops trying to fire at neighbouring cells 
              sunkenShip = true; 
              shipName += "Aircraft Carrier ";
              
            } else if (board[Character.getNumericValue(ship2[0].charAt(0))][Character.getNumericValue(ship2[0].charAt(1))] == 2 && board[Character.getNumericValue(ship2[1].charAt(0))][Character.getNumericValue(ship2[1].charAt(1))] == 2 && board[Character.getNumericValue(ship2[2].charAt(0))][Character.getNumericValue(ship2[2].charAt(1))] == 2 && board[Character.getNumericValue(ship2[3].charAt(0))][Character.getNumericValue(ship2[3].charAt(1))] == 2) {
              // Checks if the Battleship sunk
              
              // Changes the values of the CPU ship coordinates to 3 which indiates a sunken ship
              board[Character.getNumericValue(ship2[0].charAt(0))][Character.getNumericValue(ship2[0].charAt(1))] = 3;
              board[Character.getNumericValue(ship2[1].charAt(0))][Character.getNumericValue(ship2[1].charAt(1))] = 3;
              board[Character.getNumericValue(ship2[2].charAt(0))][Character.getNumericValue(ship2[2].charAt(1))] = 3;
              board[Character.getNumericValue(ship2[3].charAt(0))][Character.getNumericValue(ship2[3].charAt(1))] = 3;
              
              sunk++;
              shipDamaged = false; // shipDamaged is set to false so the CPU stops trying to fire at neighbouring cells 
              sunkenShip = true; 
              shipName += "Battleship ";
              
            } else if (board[Character.getNumericValue(ship3[0].charAt(0))][Character.getNumericValue(ship3[0].charAt(1))] == 2 && board[Character.getNumericValue(ship3[1].charAt(0))][Character.getNumericValue(ship3[1].charAt(1))] == 2 && board[Character.getNumericValue(ship3[2].charAt(0))][Character.getNumericValue(ship3[2].charAt(1))] == 2) {
              // Checks if the Submarine sunk
              
              // Changes the values of the CPU ship coordinates to 3 which indiates a sunken ship
              board[Character.getNumericValue(ship3[0].charAt(0))][Character.getNumericValue(ship3[0].charAt(1))] = 3; 
              board[Character.getNumericValue(ship3[1].charAt(0))][Character.getNumericValue(ship3[1].charAt(1))] = 3; 
              board[Character.getNumericValue(ship3[2].charAt(0))][Character.getNumericValue(ship3[2].charAt(1))] = 3; 
              
              sunk++;
              shipDamaged = false; // shipDamaged is set to false so the CPU stops trying to fire at neighbouring cells 
              sunkenShip = true; 
              shipName += "Submarine ";
              
            } else if (board[Character.getNumericValue(ship4[0].charAt(0))][Character.getNumericValue(ship4[0].charAt(1))] == 2 && board[Character.getNumericValue(ship4[1].charAt(0))][Character.getNumericValue(ship4[1].charAt(1))] == 2) {
              // Checks if the Patrol Boat sunk
              
              // Changes the values of the CPU ship coordinates to 3 which indiates a sunken ship
              board[Character.getNumericValue(ship4[0].charAt(0))][Character.getNumericValue(ship4[0].charAt(1))] = 3; 
              board[Character.getNumericValue(ship4[1].charAt(0))][Character.getNumericValue(ship4[1].charAt(1))] = 3; 
              
              sunk++;
              shipDamaged = false; // shipDamaged is set to false so the CPU stops trying to fire at neighbouring cells 
              sunkenShip = true; 
              shipName += "Patrol boat ";
              
            } else { // Hit but not sunken
              shipDamaged = true;
            }
          } 
          isGameOver = endGame(board, board2); // Checks if the CPU took out all the user ships 
          if (isGameOver == 1) { // CPU win 
            break;
          }
        }
      } while(hitShip == true); // Loop ends when the CPU misses a shot 
      
    } while (isValid == false); // Loop ends when the CPU enters an occupied cell 
    
    System.out.println("End of CPU turn. Results: ");
    System.out.println("Shots: " + (misses + hits) + " Misses: " + misses + " Hits: " + hits); 
    
    if (sunkenShip == true) { // Checks if the CPU sunk a user ship 
      System.out.println("Sunken ship(s): " + shipName);
    }
    
    // Creates an object which contains all the veriables that need to be returned
    Object[] toBeReturned = new Object[]{board, hits, misses, sunk};
    
    return toBeReturned;
    
  }
  
  public static int[] lettersToInt()
  {
    
    // Method to convert the coordinate values to integers for the user 
    
    String input;
    boolean validEntry = false;
    int y = 0; 
    int x = 0;
    int[] coordinates = new int[2];
    
    do {
      input = In.getString(); // User input 
      input = input.trim(); // Trims the input of any misplaced spaces at the end or begining
      if (input.length() == 2) { // Checks if the entry is two characters long 
        char yChar = input.charAt(0);
        char xChar = input.charAt(1);
        
        yChar = Character.toLowerCase(yChar);
        if ((yChar >= 'a' && yChar <= 'h') && (xChar >= '1' && xChar <= '8')) { // Checks if the input is only 2 characters long, the y-coordinate is a letter from a-h and if the x-coordinate is a number from 1-8
          y = yChar - 'a' + 1; // Converts the y char value to an int
          x = Character.getNumericValue(xChar); // Converts the x char value to an int 
          validEntry = true;
        } else { // Invalid input 
          System.out.println("Error: Invalid coordinates. Please enter new coordinates. Ex: A4");
          validEntry = false;
        }
      } else {
        // Entry is not 2 characters long 
        System.out.println("Error: Entry must be 2 characters long. Please enter new coordinates. Ex: H7.");
        validEntry = false;
      }
    } while (validEntry == false); // Loops until the user input is 2 characters long and when user enters a valid coordinate
    
    coordinates[0] = y;
    coordinates[1] = x;
    
    return coordinates;
    
  }
  
  public static int endGame(int[][]board, int[][] board2)
  {
    
    // Method which loops through the gameboard and checks if any player has no remaining ships then returns the result
    int spaceCounter1 = 0;
    int spaceCounter2 = 0;
    int finalResult = 0;
    
    for (int y = 1; y < 9; y ++) {
      for (int x = 1; x < 9; x ++){ // Board 1 
        if (board[y][x] == 4) { // Remaining ship cells               
          spaceCounter1 ++;
        }
      }
      for (int x = 1; x < 9; x ++){ // Board 2
        if (board2[y][x] == 4) { // Remaining ship cells                       
          spaceCounter2 ++; 
        }
      }
    } 
    
    if (spaceCounter1 == 0) { // No user ships left 
      finalResult = 1; // finalResult is set to 1, which indicates a CPU win
    } else if (spaceCounter2 == 0) { // No more CPU ships left 
      finalResult = 2; // finaResult is set to 2, which indicates a user win 
    }
    
    return finalResult;
    
  }
  
}
